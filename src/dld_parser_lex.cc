/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvsroot/dldialog/dldialog/src/dld_parser_lex.cc,v 1.1 2001/03/14 02:33:02 saturn_de Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 63
#define YY_END_OF_BUFFER 64
static yyconst short int yy_acclist[280] =
    {   0,
       64,   62,   63,   56,   62,   63,   57,   63,   62,   63,
       62,   63,   62,   63,   62,   63,   58,   62,   63,   59,
       62,   63,   62,   63,   60,   62,   63,   61,   62,   63,
       62,   63,16407,   62,   63,16407,   62,   63,16407,   62,
       63,16407,   62,   63,16407,   62,   63,16407,   62,   63,
    16407,   62,   63,16407,   62,   63,16407,   62,   63,16407,
       62,   63,16407,   62,   63,   62,   63,   62,   63,   62,
       63,   56,   47,   54,   48,16407, 8215,16407,16407,16407,
    16407,16407,16407,16407,16407,16407,16407,16407,16407,16407,
    16407,16407,16407,   49,   50,   55,16407,16407,16407,16407,

    16407,16407,16407,16407,16407,16407,16407,16407,16407,16407,
    16407,16407,16407,16407,    5,    5,16407,16407,16407,16407,
    16407,16407,16407,16407,16407,16407,16407,    4,    4,16407,
       44,   45,   33,16407,16407,16407,16407,16407,16407,16407,
        3,    3,16407,16407,16407,   10,   10,16407,16407,16407,
    16407,16407,   16,   16,16407,   26,   25,   24,16407,16407,
    16407,16407,16407,16407,16407,16407,16407,   18,   18,   21,
       21,   19,   19,16407,16407,16407,   22,   22,16407,16407,
    16407,   27,   30,   38,   42,   28,   41,   43,   17,   17,
    16407,16407,16407,16407,    2,    2,16407,16407,16407,16407,

    16407,16407,16407,16407,16407,16407,   39,   40,   29,   36,
    16407,16407,16407,16407,16407,16407,16407,16407,16407,16407,
    16407,16407,16407,   20,   20,   31,   37,   35,   34,   52,
    16407,16407,   12,   12,16407,16407,16407,16407,   52,   11,
       11,16407,   14,   14,16407,16407,   46,   32,   50,   52,
       51,16407,    6,    6,   13,   13,16407,16407,   51,   15,
       15,16407,    8,    8,   50,   51,   53,16407,   53,16407,
    16407,   50,   53,    7,    7,    1,    1,    9,    9
    } ;

static yyconst short int yy_accept[377] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    4,    7,
        9,   11,   13,   15,   17,   20,   23,   25,   28,   31,
       34,   37,   40,   43,   46,   49,   52,   55,   58,   61,
       64,   66,   68,   70,   72,   73,   73,   74,   74,   74,
       75,   75,   76,   76,   76,   76,   76,   77,   78,   79,
       80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
       90,   91,   92,   93,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       95,   95,   96,   96,   96,   96,   96,   96,   96,   97,
       97,   98,   99,  100,  101,  102,  103,  104,  105,  106,

      107,  108,  109,  110,  111,  112,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  114,
      115,  116,  117,  118,  119,  120,  121,  122,  123,  124,
      125,  126,  127,  128,  129,  130,  131,  131,  132,  132,
      132,  132,  133,  133,  133,  133,  133,  133,  133,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  135,  136,  137,  138,  139,  140,  141,
      142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
      152,  153,  154,  155,  156,  157,  157,  157,  157,  157,

      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      158,  158,  158,  159,  159,  159,  159,  159,  159,  160,
      161,  162,  163,  164,  165,  166,  167,  168,  169,  170,
      171,  172,  173,  174,  175,  176,  177,  178,  179,  180,
      181,  182,  182,  183,  184,  185,  186,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  188,  189,  189,  189,
      189,  189,  189,  189,  190,  191,  192,  193,  194,  195,
      196,  197,  198,  199,  200,  201,  202,  203,  204,  205,
      206,  207,  207,  207,  207,  208,  208,  209,  210,  210,
      210,  211,  211,  211,  211,  211,  211,  211,  212,  213,

      214,  215,  216,  217,  218,  219,  220,  221,  222,  223,
      224,  225,  226,  226,  227,  228,  229,  229,  230,  230,
      230,  230,  230,  230,  231,  232,  233,  234,  235,  236,
      237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
      247,  248,  249,  249,  249,  251,  251,  252,  253,  254,
      255,  256,  257,  258,  259,  260,  261,  262,  263,  264,
      265,  265,  267,  268,  269,  270,  271,  272,  274,  275,
      276,  277,  278,  279,  280,  280
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    6,    1,
        1,    1,    1,    1,    7,    1,    8,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    1,   10,    1,
       11,    1,    1,    1,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   13,   12,   12,   14,   12,   15,   16,   17,   18,

       19,   20,   21,   22,   23,   12,   24,   25,   26,   27,
       28,   29,   12,   30,   31,   32,   33,   34,   35,   36,
       12,   37,   38,    1,   39,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[40] =
    {   0,
        1,    2,    3,    1,    1,    1,    4,    1,    2,    5,
        6,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    5,    5
    } ;

static yyconst short int yy_base[387] =
    {   0,
        0,   38,   77,    0,  116,  155,  887, 1136,  881, 1136,
        3,  866,    6,  855, 1136, 1136,  832, 1136, 1136,   11,
       12,  167,   48,   19,   13,  126,   49,  168,  169,   18,
      183,  813,  217,  255,  818,   48, 1136,    0,  814, 1136,
       51, 1136,    0,  812,  782,   56,  127, 1136,  128,  211,
      219,  221,  133,  174,  234,  226,  239,  249,  259,  260,
      265,  270,  275,  281,  767,  752,  742,  726,   47,  726,
      719,    5,  716,   41,  700,  717,  113,  716,  681, 1136,
      693, 1136,  675,  674,  125,  164,  161,  683, 1136,  666,
      289,  294,  320,  302,  295,  313,  324,  326,  330,  331,

      341,  346,  351,  352,  366,  369,  641,  375,  612,  126,
      379,  608,  145,  603,  596,  600,  384,  587,  561,  567,
      536,  529,  524,  170,  524,  530,   40,  169,  382,  388,
      213, 1136,  405,  413,  440,  426,  378,  389,  413,  470,
      429,  418,  439,  264, 1136,  508,  437, 1136,  523,  509,
      480, 1136,  488,  474,  478,  484,  478,  473, 1136,  466,
      463,  452,  460,  437,  459,  439,  444,  475,  423,  457,
      428,  418,  464,  500,  473,  484,  503,  510,  504,  296,
     1136,  530,  540,  542,  359, 1136,  532,  536,  540,  563,
      558,  389, 1136,  565, 1136,  427,  584,  588,  597,  601,

      603,  423,  409,  407,  389,  392,  380,  368,  337, 1136,
      606,  615, 1136,  345,  331,  217,  326,   38,  618,  615,
      632,  633,  641,  627,  651,  650,  660,  423, 1136,  528,
     1136,  559, 1136,  593,  659,  666,  574, 1136,  670,  675,
      676,  277, 1136, 1136, 1136, 1136, 1136,  276,  253,  706,
      260,  708,  711,  245,  234, 1136, 1136,  717,  108,  201,
      225,  209,  205,  586, 1136,  698,  705,  706,  709,  636,
     1136,  722,  746,  750,  752,  756,  752,  758,  755,  759,
      789,  192,  791,  793, 1136,  795, 1136, 1136,  173,  804,
     1136,  300,  121,  363,   28,    4,  806,  793,  804,  816,

      820,  821,  830,  839,  857,  862,  849,  872,  859,  862,
      660, 1136,  882, 1136, 1136, 1136,  895, 1136,  287,  304,
      933,    3,  906, 1136,  887,  921,  694, 1136,  927,  895,
      921,  939,  732,  757, 1136,  944,  777, 1136,  936,  959,
     1136, 1136,  314,  997, 1136,  971, 1136,  974,  800, 1136,
      802, 1136,  977,  971,  839,  851, 1136,  977,  875, 1136,
     1035, 1136, 1136,  982,  911, 1009, 1015, 1136,  917, 1136,
      984, 1136, 1012, 1136, 1136, 1074, 1080, 1086, 1092, 1098,
     1103, 1108, 1112, 1117, 1123, 1129
    } ;

static yyconst short int yy_def[387] =
    {   0,
      376,  376,  375,    3,  377,  377,  375,  375,  375,  375,
      378,  379,  380,  375,  375,  375,  375,  375,  375,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      375,  382,  383,  383,  375,  378,  375,  384,  379,  375,
      380,  375,  385,  386,  375,  375,  381,  375,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      382,  375,   34,   34,   34,  378,  380,  386,  375,  375,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,

      381,  381,  381,  381,   93,  381,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,   34,  375,  381,  381,
      375,  375,  381,  381,  381,   93,  135,  135,  135,   93,
      135,  135,  135,  375,  375,   93,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,   34,
      375,  375,  135,  135,  135,  135,  135,  135,  135,  375,
      375,   93,   93,   93,  375,  375,  135,  135,  135,   93,
      135,  375,  375,  135,  375,  375,  375,  375,  375,  375,

      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,   34,   34,  375,  375,   93,  135,
      135,  135,  135,   93,  135,  135,  135,  375,  375,  375,
      375,  375,  375,  135,  135,  135,  375,  375,  135,  135,
      135,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,   34,   34,
      375,  375,  375,  375,  375,  135,  135,  135,  135,  375,
      375,  135,  381,  381,  381,  381,  135,  135,  135,  135,
       93,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,   34,   34,   34,  375,  375,  375,  135,  135,   93,

      135,  135,  135,  135,   93,   93,  135,   93,  135,  135,
      375,  375,  375,  375,  375,  375,  375,  375,   34,   34,
       34,  375,  375,  375,  135,   93,  375,  375,   93,  135,
      135,   93,  375,  375,  375,   93,  375,  375,  135,   93,
      375,  375,   34,   34,  375,  375,  375,  135,  375,  375,
      375,  375,   93,  135,  375,  375,  375,  135,  375,  375,
       34,  375,  375,   93,  375,   93,   93,  375,  375,  375,
      375,  375,  375,  375,    0,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375
    } ;

static yyconst short int yy_nxt[1176] =
    {   0,
      375,    9,   10,   11,   12,   13,   37,   14,  375,   15,
       16,   42,   46,   46,   46,   38,  375,   17,   43,   46,
       46,   48,   48,   48,   49,   49,   49,   56,   48,   48,
      116,   49,   49,  117,  346,  323,   64,   18,   19,    9,
       10,   11,   12,   13,   50,   14,   55,   15,   16,   46,
       46,   37,  262,  170,  322,   17,   42,   46,   48,   48,
       38,   49,   49,   43,   83,  263,   48,  111,  119,  112,
       53,   59,   54,  120,  113,   18,   19,    8,    9,   10,
       11,   12,   13,    8,   14,    8,   15,   16,   20,   20,
       20,   20,   21,   22,   23,   20,   24,   25,   20,   26,

       20,   27,   28,   20,   20,   20,   29,   20,   30,   20,
       20,   20,   20,   20,   18,   19,    8,    9,   10,   11,
       12,   13,   31,   14,   32,   15,   16,   46,   46,   46,
      292,  123,   83,   34,   46,  124,   48,   48,   48,   49,
       49,   49,  127,   48,  150,   83,   49,   95,  151,   83,
      320,   57,   58,   18,   19,    8,    9,   10,   11,   12,
       13,   31,   14,   32,   15,   16,   42,   37,   46,   46,
       46,  154,   34,   43,  155,   46,   38,   48,   48,   48,
       49,   49,   49,   62,   48,  171,   60,   49,   51,  317,
      166,   96,   18,   19,   52,   61,   63,   65,   66,  172,

       67,   68,   69,   70,   71,   72,  167,   73,   74,   75,
      313,   76,   46,   77,   46,  293,   78,   79,   82,   82,
       46,   48,   46,   48,   49,   83,   82,   46,  294,   48,
       84,   48,   49,  297,   49,   46,   48,   92,  296,   49,
       46,   83,   91,  295,   48,   93,   94,   49,  260,   48,
       46,  290,   49,   99,   82,   82,   82,   82,   98,   48,
       46,   46,   49,   97,   82,   46,   46,  289,   84,   48,
       48,   46,   49,   49,   48,   48,   46,  100,   49,   85,
       48,  286,   46,   49,  284,   48,  102,  104,   49,  101,
       46,   48,   82,   82,   49,   46,   46,   46,  103,   48,

      283,  282,   49,   46,   48,   48,   48,   49,   49,  105,
      130,   83,   48,  343,   46,   49,  106,  133,  319,  134,
      129,  131,  132,   48,   83,   46,  135,   46,   83,  132,
       48,   46,   46,   49,   48,  344,   48,   49,   83,   49,
       48,   48,   46,   49,   49,  361,  137,   46,  261,  136,
      138,   48,   46,   46,   49,  259,   48,  132,  132,   49,
       46,   48,   48,  139,   49,   49,  258,  144,  145,   48,
       46,  255,  140,  142,  143,  145,  148,  148,  141,   48,
      152,  152,   49,   46,  148,  159,  159,   83,  152,   46,
       46,  321,   48,  159,   47,   49,  182,  254,   48,   48,

      146,   49,  253,  145,  145,   47,   46,  183,   47,  173,
      252,  174,  148,  148,   46,   48,  152,  152,   49,   47,
      251,  159,  159,   48,   46,  250,   49,  180,  181,   47,
      249,   47,  175,   48,   47,  181,  190,  248,  195,  195,
      176,   46,  242,   47,  184,  188,  195,   47,   47,  218,
       48,  189,  217,   49,  214,   47,  177,   47,  178,   47,
      210,  210,  212,  181,  181,  211,  191,  209,  210,   47,
      179,  185,  186,  215,  195,  195,  213,  213,  208,  186,
       47,   83,   47,  207,  213,  206,  205,  216,  222,   47,
      219,   47,  187,  204,   47,  223,  210,  210,  203,  202,

       47,  201,   47,   47,  224,  200,  199,  186,  186,  192,
      193,  198,  213,  213,   47,  220,   47,  193,   47,   47,
       47,   47,   47,  194,  221,  197,   47,  225,   47,   46,
       47,  228,  229,   47,   47,  227,  226,  196,   48,  229,
       47,  230,  231,  232,  233,  193,  193,  169,   47,  231,
       47,  233,   47,  168,   47,  165,   47,  235,   47,  164,
       46,  163,   47,  234,  237,  238,   47,  229,  229,   48,
       47,  236,  238,  239,   47,   46,   47,  231,  231,  233,
      233,   47,  240,   47,   48,  243,  243,   46,   47,  244,
      244,  162,  241,  243,  161,   47,   48,  244,  245,  245,

      238,  238,  246,  246,  247,  247,  245,  256,  256,   47,
      246,  276,  247,  160,  158,  256,  257,  257,  157,  264,
      265,  243,  243,   47,  257,  244,  244,  265,  270,  271,
      156,   47,  153,   47,  245,  245,  271,   46,  246,  246,
      247,  247,  149,  256,  256,   47,   48,  266,   47,   47,
       47,   47,  257,  257,  267,  265,  265,   47,  147,   47,
      268,   46,   47,   47,  271,  271,   47,   47,   47,   47,
       48,   47,  269,  272,  274,   47,   47,  277,   47,  128,
       47,   47,   47,  273,  278,   89,   47,  275,   47,   47,
       47,   47,   47,   47,   47,   46,   47,  280,   83,   83,

       47,   81,  279,  126,   48,   47,   47,  285,  285,  287,
      287,  281,  288,  288,   47,  285,   47,  287,  291,  291,
      288,   47,   47,   47,   47,   47,  291,  301,   47,  298,
      125,  122,  121,   46,  118,  299,   47,  115,   47,   47,
      302,  300,   48,  285,  285,  287,  287,   46,  288,  288,
      114,   46,   47,   46,  291,  291,   48,   46,   46,  303,
       48,  110,   48,   49,  109,   49,   48,   48,  307,   49,
       47,   47,  108,   47,   47,   47,   47,   47,   46,  304,
      305,  306,   47,  308,  107,   47,  309,   48,   47,  310,
      311,  312,  314,  314,  315,  315,  316,  316,  312,   90,

      314,   46,  315,   46,  316,  318,  318,  324,  324,   47,
       48,   47,   48,  318,   89,  324,   40,  327,  328,   35,
       47,   81,   47,   47,  325,  328,  312,  312,  314,  314,
      315,  315,  316,  316,   47,  326,   47,   47,   47,   47,
       46,  318,  318,  324,  324,  329,   47,  330,  331,   48,
       47,   47,   46,  328,  328,   47,   45,   47,  333,  324,
       47,   48,   44,  334,  335,   47,  324,   47,   40,   47,
      332,  335,  336,  337,  338,   47,   46,   47,   47,   47,
       47,  338,   35,  341,  341,   48,  375,  375,  375,   47,
      339,  341,   47,  340,  324,  324,  342,  342,  375,  335,

      335,  375,  375,   47,  342,   47,  375,  347,  347,  338,
      338,   47,   46,   47,  348,  347,  375,   47,   46,  341,
      341,   48,  349,  350,  375,   47,  353,   48,  351,  352,
      350,  375,  342,  342,  345,  345,  352,   47,  375,   47,
      355,  347,  345,  347,  347,  356,  357,  354,  347,  375,
      375,   47,   47,  357,   47,  375,  375,   83,  350,  350,
      359,  360,  375,  358,  352,  352,   47,  375,  360,  375,
      345,  345,  363,  363,  375,  375,  347,  347,  365,  363,
      363,  357,  357,  369,  370,   46,  363,   47,  366,   47,
       47,  370,   47,   47,   48,   47,  360,  360,  362,  362,

      364,   47,  375,  367,   47,  375,  362,   47,  363,  363,
      371,  372,  375,   46,  363,  363,  373,  374,  372,  370,
      370,   83,   48,  375,  374,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  362,  362,  368,  368,  375,  375,
      375,  375,  375,  375,  368,  375,  372,  372,  375,  375,
      375,  375,  374,  374,  375,  375,  375,  375,  375,   83,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  368,  368,    8,    8,    8,    8,    8,    8,
       33,   33,   33,   33,   33,   33,   36,   36,   36,   36,
       36,   36,   39,   39,   39,   39,   39,   39,   41,   41,

       41,   41,   41,   41,   47,  375,   47,  375,   47,   80,
       80,  375,   80,   83,   83,   83,   83,   86,   86,  375,
       86,   86,   86,   87,   87,  375,   87,   87,   87,   88,
       88,   88,   88,   88,   88,    7,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375
    } ;

static yyconst short int yy_chk[1176] =
    {   0,
        0,    1,    1,    1,    1,    1,   11,    1,    0,    1,
        1,   13,   20,   21,   25,   11,    0,    1,   13,   30,
       24,   20,   21,   25,   20,   21,   25,   25,   30,   24,
       72,   30,   24,   72,  322,  296,   30,    1,    1,    2,
        2,    2,    2,    2,   21,    2,   24,    2,    2,   23,
       27,   36,  218,  127,  295,    2,   41,   46,   23,   27,
       36,   23,   27,   41,  127,  218,   46,   69,   74,   69,
       23,   27,   23,   74,   69,    2,    2,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,   26,   47,   49,
      259,   77,  259,    5,   53,   77,   26,   47,   49,   26,
       47,   49,   85,   53,  110,  293,   53,   53,  110,   85,
      293,   26,   26,    5,    5,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,   87,   86,   22,   28,
       29,  113,    6,   87,  113,   54,   86,   22,   28,   29,
       22,   28,   29,   29,   54,  128,   28,   54,   22,  289,
      124,   54,    6,    6,   22,   28,   29,   31,   31,  128,

       31,   31,   31,   31,   31,   31,  124,   31,   31,   31,
      282,   31,   50,   31,  131,  260,   31,   31,   33,   33,
       51,   50,   52,  131,   50,  260,   33,   56,  260,   51,
       33,   52,   51,  263,   52,   55,   56,   51,  262,   56,
       57,  216,   50,  261,   55,   52,   52,   55,  216,   57,
       58,  255,   57,   57,   33,   33,   34,   34,   56,   58,
       59,   60,   58,   55,   34,  144,   61,  254,   34,   59,
       60,   62,   59,   60,  144,   61,   63,   58,   61,   34,
       62,  251,   64,   62,  249,   63,   60,   62,   63,   59,
       91,   64,   34,   34,   64,   92,   95,  180,   61,   91,

      248,  242,   91,   94,   92,   95,  180,   92,   95,   63,
       92,  319,   94,  319,   96,   94,   64,   94,  292,   95,
       91,   93,   93,   96,  292,   97,   96,   98,  320,   93,
       93,   99,  100,   93,   97,  320,   98,   97,  343,   98,
       99,  100,  101,   99,  100,  343,   98,  102,  217,   97,
       99,  101,  103,  104,  101,  215,  102,   93,   93,  102,
      185,  103,  104,  100,  103,  104,  214,  105,  105,  185,
      106,  209,  101,  103,  104,  105,  108,  108,  102,  106,
      111,  111,  106,  129,  108,  117,  117,  294,  111,  130,
      192,  294,  129,  117,  137,  129,  137,  208,  130,  192,

      106,  130,  207,  105,  105,  138,  133,  138,  137,  129,
      206,  130,  108,  108,  134,  133,  111,  111,  133,  138,
      205,  117,  117,  134,  228,  204,  134,  136,  136,  139,
      203,  139,  133,  228,  142,  136,  142,  202,  147,  147,
      134,  135,  196,  139,  139,  141,  147,  141,  142,  172,
      135,  141,  171,  135,  169,  143,  135,  143,  135,  141,
      165,  165,  167,  136,  136,  166,  143,  164,  165,  143,
      135,  140,  140,  170,  147,  147,  168,  168,  163,  140,
      173,  170,  173,  162,  168,  161,  160,  170,  175,  175,
      173,  175,  140,  158,  173,  175,  165,  165,  157,  156,

      176,  155,  176,  175,  176,  154,  153,  140,  140,  146,
      146,  151,  168,  168,  176,  174,  174,  146,  174,  177,
      179,  177,  179,  146,  174,  150,  178,  177,  178,  230,
      174,  182,  182,  177,  179,  179,  178,  149,  230,  182,
      178,  183,  183,  184,  184,  146,  146,  126,  187,  183,
      187,  184,  188,  125,  188,  123,  189,  188,  189,  122,
      232,  121,  187,  187,  190,  190,  188,  182,  182,  232,
      189,  189,  190,  191,  191,  237,  191,  183,  183,  184,
      184,  194,  191,  194,  237,  197,  197,  264,  191,  198,
      198,  120,  194,  197,  119,  194,  264,  198,  199,  199,

      190,  190,  200,  200,  201,  201,  199,  211,  211,  234,
      200,  234,  201,  118,  116,  211,  212,  212,  115,  219,
      219,  197,  197,  234,  212,  198,  198,  219,  224,  224,
      114,  220,  112,  220,  199,  199,  224,  270,  200,  200,
      201,  201,  109,  211,  211,  220,  270,  220,  221,  222,
      221,  222,  212,  212,  221,  219,  219,  223,  107,  223,
      222,  311,  221,  222,  224,  224,  226,  225,  226,  225,
      311,  223,  223,  225,  227,  235,  227,  235,  227,   90,
      226,  225,  236,  226,  236,   88,  239,  227,  239,  235,
      227,  240,  241,  240,  241,  327,  236,  240,   84,   83,

      239,   81,  239,   79,  327,  240,  241,  250,  250,  252,
      252,  241,  253,  253,  266,  250,  266,  252,  258,  258,
      253,  267,  268,  267,  268,  269,  258,  269,  266,  266,
       78,   76,   75,  333,   73,  267,  268,   71,  272,  269,
      272,  268,  333,  250,  250,  252,  252,  273,  253,  253,
       70,  274,  272,  275,  258,  258,  273,  276,  334,  273,
      274,   68,  275,  274,   67,  275,  276,  334,  277,  276,
      277,  279,   66,  279,  278,  280,  278,  280,  337,  274,
      275,  276,  277,  278,   65,  279,  279,  337,  278,  280,
      281,  281,  283,  283,  284,  284,  286,  286,  281,   45,

      283,  349,  284,  351,  286,  290,  290,  297,  297,  298,
      349,  298,  351,  290,   44,  297,   39,  300,  300,   35,
      299,   32,  299,  298,  298,  300,  281,  281,  283,  283,
      284,  284,  286,  286,  299,  299,  301,  302,  301,  302,
      355,  290,  290,  297,  297,  301,  303,  302,  303,  355,
      301,  302,  356,  300,  300,  304,   17,  304,  305,  305,
      303,  356,   14,  306,  306,  307,  305,  307,   12,  304,
      304,  306,  307,  308,  308,  309,  359,  309,  310,  307,
      310,  308,    9,  313,  313,  359,    7,    0,    0,  309,
      309,  313,  310,  310,  305,  305,  317,  317,    0,  306,

      306,    0,    0,  325,  317,  325,    0,  323,  323,  308,
      308,  330,  365,  330,  325,  323,    0,  325,  369,  313,
      313,  365,  326,  326,    0,  330,  330,  369,  329,  329,
      326,    0,  317,  317,  321,  321,  329,  331,    0,  331,
      332,  332,  321,  323,  323,  336,  336,  331,  332,    0,
        0,  331,  339,  336,  339,    0,    0,  321,  326,  326,
      340,  340,    0,  339,  329,  329,  339,    0,  340,    0,
      321,  321,  346,  346,    0,    0,  332,  332,  353,  353,
      346,  336,  336,  364,  364,  371,  353,  354,  354,  354,
      348,  364,  348,  358,  371,  358,  340,  340,  344,  344,

      348,  354,    0,  358,  348,    0,  344,  358,  346,  346,
      366,  366,    0,  373,  353,  353,  367,  367,  366,  364,
      364,  344,  373,    0,  367,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  344,  344,  361,  361,    0,    0,
        0,    0,    0,    0,  361,    0,  366,  366,    0,    0,
        0,    0,  367,  367,    0,    0,    0,    0,    0,  361,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  361,  361,  376,  376,  376,  376,  376,  376,
      377,  377,  377,  377,  377,  377,  378,  378,  378,  378,
      378,  378,  379,  379,  379,  379,  379,  379,  380,  380,

      380,  380,  380,  380,  381,    0,  381,    0,  381,  382,
      382,    0,  382,  383,  383,  383,  383,  384,  384,    0,
      384,  384,  384,  385,  385,    0,  385,  385,  385,  386,
      386,  386,  386,  386,  386,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "dld_parser_lex.ll"
#define INITIAL 0
#line 2 "dld_parser_lex.ll"
/******************************************************************************
**
** $Id: dld_parser_lex.cc,v 1.1 2001/03/14 02:33:02 saturn_de Exp $
**
** The Lex File for DLDialog
**
**	This program is free software; you can redistribute it and/or
**	modify it under the terms of the GNU General Public License
**	as published by the Free Software Foundation; either version
**	2 of the License, or (at your option) any later version.
**
** (C) 1999,2000 Harald Hoyer <DLDialog@parzelle.de> 
**
******************************************************************************/
#include <string.h>
#include <errno.h>
#include <stdio.h>
#include <libintl.h>
#include "dldialog.h"
#include "dld_lib.h"
#include "dld_parser.h"
#include "dld_parser_yacc.h"

#undef YY_BUF_SIZE
#define YY_BUF_SIZE (YYLMAX-1)

#undef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE (YYLMAX-1)

#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else { \
                buf[0]=0; \
                if ( (( fgets( buf, max_size, yyin )) == 0) \
		  && ferror( yyin ) && (errno != EAGAIN) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" ); \
             } \
   result = strlen(buf); \
   strncpy(DLD_line, buf, YY_READ_BUF_SIZE); \
   DLD_linepos=0; \
   DLD_lineno++; \
   DLD_line[YY_READ_BUF_SIZE]=0; 
#endif

#define COMMAND 1
#define ARGS 2

#line 852 "lex.yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 70 "dld_parser_lex.ll"



/* Commands for dldialog */

#line 1009 "lex.yy.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 376 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1136 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					break;
					}
				++yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 11;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 75 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; return (DLD_ENV_END);}
	YY_BREAK
case 2:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 76 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; BEGIN ARGS; return(DIALOG);}
	YY_BREAK
case 3:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 78 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; BEGIN ARGS; return(FORM);} 
	YY_BREAK
case 4:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 79 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; BEGIN ARGS; return(ROW);} 
	YY_BREAK
case 5:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 80 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; BEGIN ARGS; return(COL);} 
	YY_BREAK
case 6:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 82 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; BEGIN ARGS; return(CHECKLIST);}
	YY_BREAK
case 7:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 11;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 83 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; BEGIN ARGS; return(CHECKBUTTON);}
	YY_BREAK
case 8:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 85 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; BEGIN ARGS; return(RADIOLIST);}
	YY_BREAK
case 9:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 11;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 86 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; BEGIN ARGS; return(RADIOBUTTON);}
	YY_BREAK
case 10:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 88 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; BEGIN ARGS; return(LIST);}
	YY_BREAK
case 11:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 89 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; BEGIN ARGS; return(LISTITEM);}
	YY_BREAK
case 12:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 91 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; BEGIN ARGS; return(COMBOBOX);} 
	YY_BREAK
case 13:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 92 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; BEGIN ARGS; return(COMBOITEM);}
	YY_BREAK
case 14:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 94 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; BEGIN ARGS; return(MENUITEM);}
	YY_BREAK
case 15:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 95 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; BEGIN ARGS; return(MENUCHECK);}
	YY_BREAK
case 16:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 97 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; BEGIN ARGS; return(TEXT);}
	YY_BREAK
case 17:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 98 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; BEGIN ARGS; return(BUTTON);}
	YY_BREAK
case 18:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 99 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; BEGIN ARGS; return(GAUGE);}
	YY_BREAK
case 19:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 100 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; BEGIN ARGS; return(INPUT);}
	YY_BREAK
case 20:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 102 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; BEGIN ARGS; return(TEXTBOX);}
	YY_BREAK
case 21:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 103 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; BEGIN ARGS; return(IMAGE);}
	YY_BREAK
case 22:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 104 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; BEGIN ARGS; return(MOVIE);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 106 "dld_parser_lex.ll"
{ 
   DLD_linepos+=yyleng; 
   yylval.dld_string=yytext; 
   return(VARIABLE); 
}
	YY_BREAK

/* Arguments for the commands */

case 24:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 115 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; return(VAR); }
	YY_BREAK
case 25:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 116 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; return(SET); }
	YY_BREAK
case 26:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 117 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; return(ADD); }
	YY_BREAK
case 27:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 118 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; return(EXEC); }
	YY_BREAK
case 28:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 119 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; return(FORK); }
	YY_BREAK
case 29:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 120 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; return(MULTI); }
	YY_BREAK
case 30:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 121 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; return(EXIT); }
	YY_BREAK
case 31:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 122 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; return(GLOBAL); }
	YY_BREAK
case 32:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 123 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; return(NUMERIC); }
	YY_BREAK
case 33:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 124 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; return(IP); }
	YY_BREAK
case 34:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 125 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; return(PASSWD); }
	YY_BREAK
case 35:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 126 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; return(LENGTH); }
	YY_BREAK
case 36:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 127 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; return(WIDTH); }
	YY_BREAK
case 37:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 128 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; return(HEIGHT); }
	YY_BREAK
case 38:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 129 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; return(FILEARG); }
	YY_BREAK
case 39:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 130 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; return(IMAGEFILE); }
	YY_BREAK
case 40:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 131 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; return(MOVIEFILE); }
	YY_BREAK
case 41:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 132 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; return(SIGN); }
	YY_BREAK
case 42:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 133 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; return(FONT); }
	YY_BREAK
case 43:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 134 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; return(SIZE); }
	YY_BREAK
case 44:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 135 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; return(BG); }
	YY_BREAK
case 45:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 136 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; return(FG); }
	YY_BREAK
case 46:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 137 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; return(DISABLE); }
	YY_BREAK

/* Overread everything that is quoted with a backslash */

case 47:
YY_RULE_SETUP
#line 142 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; 
                              yytext[yyleng-1]=0; 
			      if (strlen(&yytext[1])) {
				 textdomain (PACKAGE"-scripts");
				 yylval.dld_string = gettext(&yytext[1]);
				 textdomain (PACKAGE);
			      }
			      else
				 yylval.dld_string = &yytext[1];
			      return(NAME); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 153 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; 
                              yytext[yyleng-1]=0; 
			      if (strlen(&yytext[1])) {
				 textdomain (PACKAGE"-scripts");
				 yylval.dld_string = gettext(&yytext[1]);
				 textdomain (PACKAGE);
			      }
			      else
				 yylval.dld_string = &yytext[1];
			      return(NAME); 
}
	YY_BREAK
case 49:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 165 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; 
                                yylval.dld_string = yytext; 
                                return(NUMBER); }
	YY_BREAK
case 50:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 169 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; 
                                yylval.dld_string = yytext; 
                                return(VARNAME); }
	YY_BREAK

/* client - server communication */

case 51:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 176 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; return (DLD_START);}
	YY_BREAK
case 52:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 177 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; return (DLD_STOP);}
	YY_BREAK
case 53:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 178 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; BEGIN COMMAND; return (DLD_CLIENT);}
	YY_BREAK

/* comments and spaces */

case 54:
YY_RULE_SETUP
#line 185 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 186 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 187 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 188 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; }
	YY_BREAK

/* delimeters */

case 58:
YY_RULE_SETUP
#line 194 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; 
                              BEGIN COMMAND; return(';'); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 196 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; 
                              BEGIN ARGS; return('='); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 198 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; 
                              BEGIN COMMAND; return('{'); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 200 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; 
                              BEGIN COMMAND; return('}'); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 203 "dld_parser_lex.ll"
{ DLD_linepos+=yyleng; return yytext[0]; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 204 "dld_parser_lex.ll"
ECHO;
	YY_BREAK
#line 1624 "lex.yy.c"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(COMMAND):
			case YY_STATE_EOF(ARGS):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 376 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 376 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 375);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 204 "dld_parser_lex.ll"
